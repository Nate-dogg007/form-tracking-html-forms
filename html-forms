/*
============================================
HTML Forms Tracking Script with Smart Hashing
Author: Nathan O'Connor
============================================

ðŸ“Œ What this script does:
- Tracks standard HTML form submissions (including .submit()).
- Hashes personal fields: email, phone, name, address, postcode, country.
- Normalizes keys (lowercase, underscores only).
- Pushes a 'form_submission_hashed' event to the dataLayer.
- Intended for use with GTM, GA4, and Google Ads Enhanced Conversions.
*/

(function () {
  if (!window.crypto || !crypto.subtle) {
    console.warn('SubtleCrypto not supported in this browser.');
    return;
  }

  function hashString(str) {
    if (typeof str !== 'string' || str.length === 0) return Promise.resolve('');

    const encoder = new TextEncoder();
    const data = encoder.encode(str.trim().toLowerCase());

    return crypto.subtle.digest('SHA-256', data).then(function (buffer) {
      const hashArray = Array.from(new Uint8Array(buffer));
      return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');
    }).catch(function (err) {
      console.error('Hashing error:', err);
      return '';
    });
  }

  function normalizeKey(str) {
    return str.trim().toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '_');
  }

  function cleanPhone(str) {
    return str.replace(/[^0-9+]/g, '');
  }

  function handleFormSubmit(eventOrForm) {
    const form = eventOrForm.target || eventOrForm;
    const formData = {};
    const hashPromises = [];

    const hashRules = [
      { match: /email/, clean: s => s.trim().toLowerCase(), key: 'hashed_email' },
      { match: /phone|tel/, clean: cleanPhone, key: 'hashed_phone' },
      { match: /name/, clean: s => s.trim().toLowerCase(), key: 'hashed_name' },
      { match: /address/, clean: s => s.trim().toLowerCase(), key: 'hashed_address' },
      { match: /zip|post/, clean: s => s.trim().toLowerCase(), key: 'hashed_postcode' },
      { match: /country/, clean: s => s.trim().toLowerCase(), key: 'hashed_country' }
    ];

    for (let i = 0; i < form.elements.length; i++) {
      const field = form.elements[i];
      if (!field.name || field.tagName === 'BUTTON' || field.type === 'submit' || ((field.type === 'checkbox' || field.type === 'radio') && !field.checked)) continue;

      const rawName = field.name;
      const normKey = normalizeKey(rawName);
      const rawValue = field.value || '';

      let hashed = false;

      for (let rule of hashRules) {
        if (rule.match.test(normKey)) {
          const cleaned = rule.clean(rawValue);
          hashPromises.push(
            hashString(cleaned).then(function (hashedValue) {
              formData[rule.key] = hashedValue;
            })
          );
          hashed = true;
          break;
        }
      }

      if (!hashed) {
        formData[normKey] = rawValue;
      }
    }

    const formId = form.id || 'N/A';
    const formName = form.getAttribute('data-title') || form.name || 'N/A';

    Promise.all(hashPromises).then(function () {
      if (Object.keys(formData).length > 0) {
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
          event: 'form_submission_hashed',
          form_details: {
            form_id: formId,
            form_name: formName
          },
          form_data: formData
        });
        console.log('âœ… form_submission_hashed event pushed to dataLayer');
      }
    });
  }

  const originalSubmit = HTMLFormElement.prototype.submit;
  HTMLFormElement.prototype.submit = function () {
    handleFormSubmit(this);
    return originalSubmit.apply(this, arguments);
  };

  document.addEventListener('submit', function (e) {
    handleFormSubmit(e);
  }, true);
})();
