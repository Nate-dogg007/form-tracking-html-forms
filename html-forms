<script>
/*
  ░▒▓█ Form Tracking & Hashing Script █▓▒░
  Author: Nathan O'Connor

  ─────────────────────────────────────────────────────────────
  WHAT THIS SCRIPT DOES:
  ✅ Tracks standard HTML form submissions (non-AJAX).
  ✅ Extracts and normalizes all input field names and values.
  ✅ Hashes personal fields (email, phone, name, address, etc.) using SHA-256.
  ✅ Pushes a `form_submission_hashed` event to the dataLayer.
*/

(function () {
  if (!window.crypto || !crypto.subtle) {
    console.warn('SubtleCrypto not supported in this browser.');
    return;
  }

  // Normalize keys to lowercase with underscores
  function normalizeKey(str) {
    return str.trim().toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '_');
  }

  // SHA-256 hashing function
  function hashString(str) {
    str = str.trim().toLowerCase();
    if (!str) return Promise.resolve('');
    var encoder = new TextEncoder();
    var data = encoder.encode(str);
    return crypto.subtle.digest('SHA-256', data).then(function (buffer) {
      var hashArray = Array.prototype.slice.call(new Uint8Array(buffer));
      return hashArray.map(function (b) {
        return ('00' + b.toString(16)).slice(-2);
      }).join('');
    }).catch(function (err) {
      console.error('Hashing error:', err);
      return '';
    });
  }

  function handleFormSubmit(eventOrForm) {
    var form = eventOrForm.target || eventOrForm;
    var formData = {};
    var hashPromises = [];
    var hashFields = ['email', 'phone', 'name', 'first_name', 'last_name', 'address', 'postcode', 'zip', 'country'];
    var excludeFields = ['password', 'credit_card', 'cvc'];

    for (var i = 0; i < form.elements.length; i++) {
      var field = form.elements[i];

      if (
        !field.name ||
        field.disabled ||
        field.tagName === 'BUTTON' ||
        field.type === 'submit' ||
        ((field.type === 'checkbox' || field.type === 'radio') && !field.checked)
      ) {
        continue;
      }

      var rawKey = field.name;
      var normKey = normalizeKey(rawKey);
      var value = field.value.trim();

      if (!value || excludeFields.indexOf(normKey) !== -1) continue;

      var shouldHash = false;
      for (var j = 0; j < hashFields.length; j++) {
        if (normKey.indexOf(hashFields[j]) !== -1) {
          shouldHash = true;
          break;
        }
      }

      if (shouldHash) {
        (function (key, val) {
          var promise = hashString(val).then(function (hash) {
            formData['hashed_' + key] = hash;
          });
          hashPromises.push(promise);
        })(normKey, value);
      } else {
        formData[normKey] = value;
      }
    }

    var formId = form.id || 'N/A';
    var formName = form.getAttribute('data-title') || form.name || 'N/A';

    Promise.all(hashPromises).then(function () {
      if (Object.keys(formData).length > 0) {
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
          event: 'form_submission_hashed',
          form_details: {
            form_id: formId,
            form_name: formName
          },
          form_data: formData
        });
        console.log('✅ form_submission_hashed event pushed to dataLayer');
      }
    });
  }

  // Intercept .submit()
  var originalSubmit = HTMLFormElement.prototype.submit;
  HTMLFormElement.prototype.submit = function () {
    handleFormSubmit(this);
    return originalSubmit.apply(this, arguments);
  };

  // Also catch manual submits
  document.addEventListener('submit', function (e) {
    handleFormSubmit(e);
  }, true);
})();
</script>
